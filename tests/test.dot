digraph {
"test.c#main#4#28#5#5" [label="int day, x1 = 0, x2;"];
"test.c#main#4#28#6#6" [label="day=9;"];
"test.c#main#4#28#7#7" [label="x2=1;"];
"test.c#main#4#28#8#24" [label="while(day>0) {\n        x1=(x2+1)*2;\n        x2=x1;\n        day--;\n        if(x3==0)\n        	continue;\n        if (x2==0){\n        	continue;\n        }\n        switch(x){\n        	case 2{\n            	x+= 1;\n            }\n            case 3 x+= 1; break;\n        }\n        day++;\n    }"];
"test.c#main#4#28#8#24#9#9" [label="x1=(x2+1)*2;"];
"test.c#main#4#28#25#25" [label="printf(\"Total %d\n\",x1);"];
"test.c#main#4#28#8#24#10#10" [label="x2=x1;"];
"test.c#main#4#28#8#24#11#11" [label="day--;"];
"test.c#main#4#28#8#24#12#13" [label="if(x3==0)\n        	continue;"];
"test.c#main#4#28#8#24#12#13#13#13" [label="continue;"];
"test.c#main#4#28#8#24#14#16" [label="if (x2==0){\n        	continue;\n        }"];
"test.c#main#4#28#8#24#14#16#15#15" [label="continue;"];
"test.c#main#4#28#8#24#17#22" [label="switch(x){\n        	case 2{\n            	x+= 1;\n            }\n            case 3 x+= 1; break;\n        }"];
"test.c#main#4#28#8#24#17#22#18#20" [label="case 2{\n            	x+= 1;\n            }"];
"test.c#main#4#28#8#24#23#23" [label="day++;"];
"test.c#main#4#28#8#24#17#22#18#20#19#19" [label="x+= 1;"];
"test.c#main#4#28#8#24#17#22#21#21" [label="case 3 x+= 1; break;"];
"test.c#main#4#28#8#24#17#22#21#21#21#21" [label="break;"];
"test.c#main#4#28#27#27" [label="return 0;"];
"test.c#main#4#28#5#5" -> "test.c#main#4#28#6#6";
"test.c#main#4#28#6#6" -> "test.c#main#4#28#7#7";
"test.c#main#4#28#7#7" -> "test.c#main#4#28#8#24";
"test.c#main#4#28#8#24" -> "test.c#main#4#28#8#24#9#9";
"test.c#main#4#28#8#24" -> "test.c#main#4#28#25#25";
"test.c#main#4#28#8#24#9#9" -> "test.c#main#4#28#8#24#10#10";
"test.c#main#4#28#25#25" -> "test.c#main#4#28#27#27";
"test.c#main#4#28#8#24#10#10" -> "test.c#main#4#28#8#24#11#11";
"test.c#main#4#28#8#24#11#11" -> "test.c#main#4#28#8#24#12#13";
"test.c#main#4#28#8#24#12#13" -> "test.c#main#4#28#8#24#12#13#13#13";
"test.c#main#4#28#8#24#12#13" -> "test.c#main#4#28#8#24#14#16";
"test.c#main#4#28#8#24#12#13#13#13" -> "test.c#main#4#28#8#24";
"test.c#main#4#28#8#24#14#16" -> "test.c#main#4#28#8#24#14#16#15#15";
"test.c#main#4#28#8#24#14#16" -> "test.c#main#4#28#8#24#17#22";
"test.c#main#4#28#8#24#14#16#15#15" -> "test.c#main#4#28#8#24";
"test.c#main#4#28#8#24#17#22" -> "test.c#main#4#28#8#24#17#22#18#20";
"test.c#main#4#28#8#24#17#22" -> "test.c#main#4#28#8#24#23#23";
"test.c#main#4#28#8#24#17#22#18#20" -> "test.c#main#4#28#8#24#17#22#18#20#19#19";
"test.c#main#4#28#8#24#17#22#18#20" -> "test.c#main#4#28#8#24#17#22#21#21";
"test.c#main#4#28#8#24#23#23" -> "test.c#main#4#28#8#24";
"test.c#main#4#28#8#24#17#22#18#20#19#19" -> "test.c#main#4#28#8#24#17#22#21#21";
"test.c#main#4#28#8#24#17#22#21#21" -> "test.c#main#4#28#8#24#17#22#21#21#21#21";
"test.c#main#4#28#8#24#17#22#21#21" -> "test.c#main#4#28#8#24#23#23";
"test.c#main#4#28#8#24#17#22#21#21#21#21" -> "test.c#main#4#28#8#24#17#22#21#21#21#21";
"test.c#main#4#28#8#24#17#22#21#21#21#21" -> "test.c#main#4#28#8#24#23#23";
}
